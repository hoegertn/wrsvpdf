<?xml version="1.0" encoding="UTF-8"?>
<project name="Packaging Generator" default="int" basedir="../">

	<property file="${basedir}/ant/version.properties" />
	
	<property name="target" value="../../~wrsvpdf" />
	<property name="loggingInstall" value="C:/DevelopmentTools/commons-logging-1.1.1" />
	<property name="package" value="${target}/package" />

	<!-- Java-Quelltext -->
	<fileset id="JavaQuelltext" dir="${target}/src">
		<include name="**/*.java" />
	</fileset>

	<!-- Java-Quelltext -->
	<fileset id="JavaBinary" dir="${target}/bin">
		<include name="**/*.class" />
	</fileset>

	<!-- Libraries -->
	<path id="LibPath">
		<fileset id="LibDirectory" dir="${basedir}/lib/">
			<include name="**/*.jar" />
		</fileset>
		<pathelement location="${loggingInstall}/commons-logging.jar" />
	</path>


	<target name="dev" description="Development Build">
		<antcall target="-clean" />
		<antcall target="-prepare" />
		
		<getbuildnr buildnrproperty="build.number" />
		<echo>Building: ${version.major}.${version.minor}.${version.revision}_${version.date}#${build.number}</echo>

		<antcall target="-copySrc" />
		<antcall target="-compileAndJar" />
		<antcall target="-package" />
	</target>

	<target name="int" description="Integration Build">
		<antcall target="-clean" />
		<antcall target="-prepare" />

		<getbuildnr buildnrproperty="build.number" />
		<echo>Building: ${version.major}.${version.minor}.${version.revision}_${version.date}#${build.number}</echo>
		
		<antcall target="-copySrc" />
		<antcall target="-compileAndJar" />
		<antcall target="-javadoc" />
		<antcall target="-package" />
	</target>


	<!-- MAKRO: Build-Nummer aus Changeset-Revision ermitteln -->
	<macrodef name="getbuildnr">
		<attribute name="buildnrproperty" />
		<sequential>
			<exec executable="git" output="~getbuildnr.xml">
				<arg value="log" />
				<arg value="-n" />
				<arg value="1" />
				<arg value="--pretty=&quot;&lt;rev&gt;%h&lt;/rev&gt;&quot;" />
			</exec>
			<xmlproperty file="~getbuildnr.xml" collapseAttributes="true" />
			<property name="@{buildnrproperty}" value="${rev}" />
			<delete file="~getbuildnr.xml" />
		</sequential>
	</macrodef>


	<!-- ==== Vorbereitung ==== -->
	<target name="-prepare" description="Vorbereitung und Initialisierung">
		<mkdir dir="${target}/bin" />
		<mkdir dir="${target}/src" />
		<mkdir dir="${target}/jar" />
		<mkdir dir="${target}/javadoc" />

		<mkdir dir="${package}/docs" />
		<mkdir dir="${package}/docs/javadoc" />
		<mkdir dir="${package}/lib" />
		<mkdir dir="${package}/images" />
		<mkdir dir="${package}/reports" />

		<record name="c:/Builds/wrsv_build.log" />

	</target>

	<target name="-clean" description="Entfernt alle generierten Dateien und Verzeichnisse">
		<delete dir="${target}" />
	</target>

	<target name="-copySrc" description="Vorbereitung und Initialisierung">

		<!-- Installationsdatei erstellen -->
		<!-- Installationsdatei erstellen -->
		<copy todir="${target}/src">
			<fileset dir="${basedir}/src">
				<include name="**/*.*" />
			</fileset>
			<filterset>
				<filter token="MAJOR" value="${version.major}" />
				<filter token="MINOR" value="${version.minor}" />
				<filter token="REVISION" value="${version.revision}" />
				<filter token="RELDATE" value="${version.date}" />
				<filter token="SVN" value="${build.number}" />
			</filterset>
		</copy>

	</target>


	<!-- ==== Installationsdatei erstellen ==== -->
	<target name="-compileAndJar" description="Erstellt die Development Builds">

		<!-- create a property containing all .jar files, prefix lib/, and seperated with a space -->
		<pathconvert property="libs.project" pathsep=" ">
			<mapper>
				<chainedmapper>

					<!-- remove absolute path -->
					<flattenmapper />

					<!-- add lib/ prefix -->
					<globmapper from="*" to="lib/*" />
				</chainedmapper>
			</mapper>
			<path>
				<!-- contains all jar files, in several subdirectories -->
				<fileset dir="${basedir}/lib">
					<include name="**/*.jar" />
				</fileset>
			</path>
		</pathconvert>

		<javac srcdir="${target}/src" encoding="UTF8" destdir="${target}/bin" debug="true" debuglevel="lines,vars,source">
			<classpath refid="LibPath" />
		</javac>

		<jar destfile="${target}/jar/com.hoegernet.wrsvpdf.jar">
			<!-- define MANIFEST.MF -->
			<manifest>
				<attribute name="Built-By" value="Thorsten Hoeger" />
				<attribute name="Built-Jdk" value="1.7.0" />
				<attribute name="Main-Class" value="com.hoegernet.wrsvpdf.Starter" />
				<attribute name="Specification-Title" value="WRSV PDF generator" />
				<attribute name="Specification-Version" value="2.0.0" />
				<attribute name="Specification-Vendor" value="Hoegernet" />
				<attribute name="Implementation-Title" value="com.hoegernet.wrsvpdf" />
				<attribute name="Implementation-Version" value="${version.major}.${version.minor}.${version.revision}_${version.date}#${build.number}" />
				<attribute name="Implementation-Vendor" value="Hoegernet" />
				<!-- finally, use the magically generated libs path -->
				<attribute name="Class-Path" value="${libs.project}" />
			</manifest>
			<fileset refid="JavaBinary" />
		</jar>

	</target>

	<target name="-javadoc" description="Erstellt das Javadoc">
		<javadoc destdir="${target}/javadoc">
			<fileset refid="JavaQuelltext" />
			<classpath>
				<path refid="LibPath" />
			</classpath>
		</javadoc>
	</target>

	<target name="-package" description="package">

		<copy todir="${package}">
			<fileset dir="${target}/jar" includes="**.*" />
		</copy>

		<copy todir="${package}/docs">
			<fileset dir="${basedir}/docs" includes="**/**.*" />
		</copy>
		<copy todir="${package}/docs/javadoc">
			<fileset dir="${target}/javadoc" includes="**/**.*" />
		</copy>
		<copy todir="${package}">
			<fileset dir="${basedir}/config" includes="**.*" excludes="MANIFEST.MF" />
			<fileset dir="${basedir}/config" includes="jre8/**/**.*" />
		</copy>
		<copy todir="${package}/lib">
			<fileset dir="${basedir}/lib" includes="**.*" />
		</copy>
		<copy todir="${package}/images">
			<fileset dir="${basedir}/images" includes="**/**.*" />
		</copy>
		<copy todir="${package}/reports">
			<fileset dir="${basedir}/reports" includes="**/**.*" />
		</copy>
	</target>
</project>
